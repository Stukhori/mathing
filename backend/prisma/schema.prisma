// Define the database connection
datasource db {
  provider = "postgresql" // or "mysql", "sqlite", "sqlserver"
  url      = env("DATABASE_URL") // Use environment variable for the connection string
}

// Define the generator for the Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Your models go here
model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  passwordHash    String
  streak          Int      @default(0)
  lastActiveDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  submissions     TaskSubmission[] // Relation to TaskSubmission

  ChatSession ChatSession[]
}

model DailyTask {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  answer          String
  createdAt       DateTime @default(now())
  submissions     TaskSubmission[] // Relation to TaskSubmission

  ChatSession ChatSession[]
}

model TaskSubmission {
  id              Int      @id @default(autoincrement())
  userId          Int
  taskId          Int
  submittedAnswer String
  isCorrect       Boolean
  submittedAt     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
  task            DailyTask @relation(fields: [taskId], references: [id])
  aiFeedback String?
}

model Lesson {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  order         Int            @unique()
  difficulty    Difficulty     @default(BEGINNER)
  tags          LessonTag[]
  prerequisites Prerequisite[] @relation("PrerequisiteRelations")
  requiredFor   Prerequisite[] @relation("RequiredForRelations")
  theory        Theory[]
  questions     Question[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model LessonTag {
  id       Int    @id @default(autoincrement())
  name     String @unique()
  lessons  Lesson[]
}

model Prerequisite {
  id               Int     @id @default(autoincrement())
  lesson           Lesson  @relation(fields: [lessonId], references: [id], name: "RequiredForRelations")
  lessonId         Int
  requiredLesson   Lesson  @relation(fields: [requiredLessonId], references: [id], name: "PrerequisiteRelations")
  requiredLessonId Int
  @@unique([lessonId, requiredLessonId])
}

model Question {
  id          Int      @id @default(autoincrement())
  text        String
  explanation String?
  difficulty  Difficulty @default(BEGINNER)
  tags        QuestionTag[]
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    Int
  order       Int
  choices     Choice[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([lessonId, order])
}

model QuestionTag {
  id        Int       @id @default(autoincrement())
  name      String    @unique()
  questions Question[]
}

model Theory {
  id          Int       @id @default(autoincrement())
  title       String?
  content     String    // Main theory text
  examples    Json?     // Optional examples in JSON format
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  lessonId    Int
  order       Int       // For ordering multiple theory sections
  mediaUrl    String?   // Optional image/video URL
  mediaType   String?   // 'image' or 'video'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([lessonId, order])
}

model Choice {
  id         Int      @id @default(autoincrement())
  text       String
  isCorrect  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ChatSession {
  id          String       @id @default(uuid())
  userId      Int
  taskId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  expiresAt   DateTime     @default(now())
  messages    ChatMessage[]
  user        User         @relation(fields: [userId], references: [id])
  task        DailyTask    @relation(fields: [taskId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model ChatMessage {
  id          String      @id @default(uuid())
  content     String
  role        MessageRole // user or assistant
  session     ChatSession @relation(fields: [sessionId], references: [id])
  sessionId   String
  createdAt   DateTime    @default(now())

  @@index([sessionId])
}

enum MessageRole {
  USER
  ASSISTANT
}